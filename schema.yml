openapi: 3.0.3
info:
  title: Your Project API
  version: 1.0.0
  description: Detailed description of your project API.
paths:
  /api/blog:
    get:
      operationId: blog_list
      tags:
      - blog
      security:
      - jwtAuth: []
      - bearerAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Posts'
          description: ''
  /api/blog/{id}:
    get:
      operationId: blog_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog
      security:
      - jwtAuth: []
      - bearerAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
          description: ''
  /api/blog/delete/{id}:
    get:
      operationId: blog_delete_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog
      security:
      - jwtAuth: []
      - bearerAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
          description: ''
    delete:
      operationId: blog_delete_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog
      security:
      - jwtAuth: []
      - bearerAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/blog/post:
    post:
      operationId: blog_post_create
      tags:
      - blog
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostsRequest'
        required: true
      security:
      - jwtAuth: []
      - bearerAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
          description: ''
  /api/blog/update/{id}:
    get:
      operationId: blog_update_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog
      security:
      - jwtAuth: []
      - bearerAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
          description: ''
    put:
      operationId: blog_update_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostsRequest'
        required: true
      security:
      - jwtAuth: []
      - bearerAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
          description: ''
    patch:
      operationId: blog_update_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPostsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPostsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPostsRequest'
      security:
      - jwtAuth: []
      - bearerAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
          description: ''
  /api/refresh:
    post:
      operationId: refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - refresh
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/token:
    post:
      operationId: token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
        required: true
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
components:
  schemas:
    PatchedPostsRequest:
      type: object
      properties:
        created_by:
          type: integer
        image:
          type: string
          format: binary
          nullable: true
        title:
          type: string
          minLength: 1
          maxLength: 50
        content:
          type: string
          minLength: 1
          maxLength: 1000
    Posts:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_by:
          type: integer
        image:
          type: string
          format: uri
          nullable: true
        posted_date:
          type: string
          format: date
          readOnly: true
        title:
          type: string
          maxLength: 50
        content:
          type: string
          maxLength: 1000
      required:
      - content
      - id
      - posted_date
      - title
    PostsRequest:
      type: object
      properties:
        created_by:
          type: integer
        image:
          type: string
          format: binary
          nullable: true
        title:
          type: string
          minLength: 1
          maxLength: 50
        content:
          type: string
          minLength: 1
          maxLength: 1000
      required:
      - content
      - title
    TokenObtainPair:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - refresh
    TokenObtainPairRequest:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - password
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
      required:
      - access
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - refresh
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
